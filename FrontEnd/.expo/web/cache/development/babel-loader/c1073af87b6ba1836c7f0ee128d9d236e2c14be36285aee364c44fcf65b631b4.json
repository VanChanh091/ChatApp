{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\20045291\\\\CNM\\\\BTL\\\\realtime-chat-app-main\\\\FrontEnd\\\\screens\\\\ChatsScreen.js\",\n  _this = this;\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { UserType } from \"../UserContext\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport UserChat from \"../components/UserChat\";\nimport GroupChat from \"../components/GroupChat\";\nimport User from \"../components/User\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ChatsScreen = function ChatsScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    acceptedFriends = _useState2[0],\n    setAcceptedFriends = _useState2[1];\n  var _useContext = useContext(UserType),\n    userId = _useContext.userId,\n    setUserId = _useContext.setUserId;\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    users = _useState4[0],\n    setUsers = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedUsers = _useState6[0],\n    setSelectedUsers = _useState6[1];\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    groups = _useState8[0],\n    setGroups = _useState8[1];\n  var fetchGroups = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(`localhost:8000/groups/${userId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch groups');\n        }\n        var data = yield response.json();\n        setGroups(data);\n      } catch (error) {\n        console.error('Error fetching groups:', error);\n      }\n    });\n    return function fetchGroups() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var toggleSelectUser = function toggleSelectUser(userId) {\n    if (selectedUsers.includes(userId)) {\n      setSelectedUsers(selectedUsers.filter(function (id) {\n        return id !== userId;\n      }));\n    } else {\n      setSelectedUsers([].concat(_toConsumableArray(selectedUsers), [userId]));\n    }\n  };\n  var navigation = useNavigation();\n  useEffect(function () {\n    var acceptedFriendsList = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(`localhost:8000/accepted-friends/${userId}`);\n          var data = yield response.json();\n          if (response.ok) {\n            setAcceptedFriends(data);\n          }\n        } catch (error) {\n          console.log(\"error showing the accepted friends\", error);\n        }\n      });\n      return function acceptedFriendsList() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    acceptedFriendsList();\n    fetchGroups();\n    ;\n  }, []);\n  console.log(\"friends\", acceptedFriends);\n  useEffect(function () {\n    var fetchUsers = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var token = yield AsyncStorage.getItem(\"authToken\");\n        var decodedToken = jwt_decode(token);\n        var userId = decodedToken.userId;\n        setUserId(userId);\n        axios.get(`localhost:8000/users/${userId}`).then(function (response) {\n          setUsers(response.data);\n          console.log(\"users[] :\", users);\n        }).catch(function (error) {\n          console.log(\"error retrieving users\", error);\n        });\n      });\n      return function fetchUsers() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    fetchUsers();\n  }, []);\n  return _jsxDEV(View, {\n    children: _jsxDEV(ScrollView, {\n      style: {\n        padding: 10\n      },\n      children: users.map(function (item, index) {\n        return _jsxDEV(TouchableOpacity, {\n          onPress: function onPress() {\n            return toggleSelectUser(item.userId);\n          },\n          children: _jsxDEV(User, {\n            item: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, _this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, _this);\n};\nexport default ChatsScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useContext","useEffect","useState","UserType","useNavigation","UserChat","GroupChat","User","AsyncStorage","jwt_decode","axios","jsxDEV","_jsxDEV","ChatsScreen","_useState","_useState2","_slicedToArray","acceptedFriends","setAcceptedFriends","_useContext","userId","setUserId","_useState3","_useState4","users","setUsers","_useState5","_useState6","selectedUsers","setSelectedUsers","_useState7","_useState8","groups","setGroups","fetchGroups","_ref","_asyncToGenerator","response","fetch","ok","Error","data","json","error","console","apply","arguments","toggleSelectUser","includes","filter","id","concat","_toConsumableArray","navigation","acceptedFriendsList","_ref2","log","fetchUsers","_ref3","token","getItem","decodedToken","get","then","catch","View","children","ScrollView","style","padding","map","item","index","TouchableOpacity","onPress","fileName","_jsxFileName","lineNumber","columnNumber","_this","styles","StyleSheet","create"],"sources":["D:/20045291/CNM/BTL/realtime-chat-app-main/FrontEnd/screens/ChatsScreen.js"],"sourcesContent":["import { StyleSheet, Text, View ,ScrollView, Pressable, TouchableOpacity} from \"react-native\";\nimport React, { useContext,useEffect,useState } from \"react\";\nimport { UserType } from \"../UserContext\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport UserChat from \"../components/UserChat\";\nimport GroupChat from \"../components/GroupChat\";\nimport User from \"../components/User\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\n\nconst ChatsScreen = () => {\n  const [acceptedFriends, setAcceptedFriends] = useState([]);\n  const { userId, setUserId } = useContext(UserType);\n  // const navigation = useNavigation();\n\n  // const { userId, setUserId } = useContext(UserType);\n  const [users, setUsers] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n\n  const [groups, setGroups] = useState([]);\n  const fetchGroups = async () => {\n    try {\n      // Replace 'userId' with the actual ID of the logged-in user\n      // const userId = userId; // You should retrieve the actual userId from your authentication system\n      const response = await fetch(`localhost:8000/groups/${userId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch groups');\n      }\n      const data = await response.json();\n      setGroups(data);\n    } catch (error) {\n      console.error('Error fetching groups:', error);\n      // Handle error\n    }\n  };\n\n    const toggleSelectUser = (userId) => {\n    if (selectedUsers.includes(userId)) {\n      // Nếu người dùng đã được chọn, hãy bỏ chọn\n      setSelectedUsers(selectedUsers.filter((id) => id !== userId));\n    } else {\n      // Nếu người dùng chưa được chọn, hãy chọn\n      setSelectedUsers([...selectedUsers, userId]);\n    }\n  };\n\n\n  const navigation = useNavigation();\n  useEffect(() => {\n    const acceptedFriendsList = async () => {\n      try {\n        const response = await fetch(\n          `localhost:8000/accepted-friends/${userId}`\n        );\n        const data = await response.json();\n\n        if (response.ok) {\n          setAcceptedFriends(data);\n        }\n      } catch (error) {\n        console.log(\"error showing the accepted friends\", error);\n      }\n    };\n\n    acceptedFriendsList();\n    fetchGroups();\n    ;\n  }, []);\n  console.log(\"friends\",acceptedFriends)\n\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const token = await AsyncStorage.getItem(\"authToken\");\n      const decodedToken = jwt_decode(token);\n      const userId = decodedToken.userId;\n      setUserId(userId);\n\n      axios\n        .get(`localhost:8000/users/${userId}`)\n        .then((response) => {\n          setUsers(response.data);\n\n          console.log(\"users[] :\", users);\n        })\n        .catch((error) => {\n          console.log(\"error retrieving users\", error);\n        });\n    };\n\n    fetchUsers();\n  }, []);\n\n  \n  return (\n    // <ScrollView showsVerticalScrollIndicator={false}>\n    //   <Pressable>\n        \n    //       {acceptedFriends.map((item,index) => (\n    //           <UserChat key={index} item={item}/>\n    //       ))}\n    //       {\n    //         groups.map((item,index) => (\n    //           <GroupChat key={index} item={item}/>\n    //         ))\n    //       }\n    //   </Pressable>\n    // </ScrollView>\n    <View>\n      <ScrollView style={{ padding: 10 }}>\n        {users.map((item, index) => (\n          <TouchableOpacity\n            key={index}\n            onPress={() => toggleSelectUser(item.userId)}\n          >\n            <User item={item} />\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default ChatsScreen;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}